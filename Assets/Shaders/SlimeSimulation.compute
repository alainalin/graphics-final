#pragma kernel UpdateSlimeSimulation

// redefine necessary structs
struct SlimeAgent {
    float2 position; // canvas space
    float angle; // direction agent faces in radians
    int speciesID; // identifying index into species buffer 
    float hunger; // 0-1, 1 is full, 0 is starving
};

struct SpeciesSettings {
    float sensorAngle;
    float rotationAngle; 
    // should be bigger than sensorAngle to avoid convergence, adjusted by random offset (ranging 0, 45)? in compute shader 

    int sensorDist; 
    int sensorRadius;
    float velocity;
    float trailWeight;
    float hungerDecayRate;
    float4 color;
};

struct FoodSource {
    float2 position;
    float attractorStrength;
    int amount;
};

RWTexture2D<float4> TrailMap;
RWTexture2D<float4> NextTrailMap;

int width;
int height;

RWStructuredBuffer<SlimeAgent> slimeAgents;
uint numAgents;

RWStructuredBuffer<SpeciesSettings> species;

RWStructuredBuffer<FoodSource> foodSources;
int numFoodSources;
float cAttraction;
bool foodDepletionEnabled;

float decayRate;
float diffuseRate;

float dt;
float time;

float4 speciesMask(int speciesID) {
    return float4(speciesID == 0, speciesID == 1, speciesID == 2, speciesID == 3);
}

float clamp(float num, float lower, float upper)
{
    return max(lower, min(num, upper));
}

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
// consider changing hash function ***
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

// sample trails around agent where angleOffset is the offset from the original direction that the agent is traveling in 
// returning the strength of attraction of the agent towards the offseted angle 
float sampleTrail(SlimeAgent agent, float angleOffset) 
{
    SpeciesSettings agentSettings = species[agent.speciesID];
    float2 dir = float2(cos(agent.angle + angleOffset), sin(agent.angle + angleOffset));
    int2 pos = int2(agent.position + dir * agentSettings.sensorDist);

    int rad = agentSettings.sensorRadius;

    float4 strength = 0; 
    for (int x = -rad; x < rad + 1; x++) {
        for (int y = -rad; y < rad + 1; y++) {
            int xPos = clamp(pos.x + x, 0, width - 1);
            int yPos = clamp(pos.y + y, 0, height - 1);

            strength += TrailMap[int2(xPos, yPos)];
        }
    }

    int agentID = agent.speciesID;
    float4 attractions = 2 * speciesMask(agent.speciesID) - 1;

    return dot(strength, attractions);
} 

void step(int agentIdx) {
    SlimeAgent agent = slimeAgents[agentIdx];
    SpeciesSettings agentSettings = species[agent.speciesID];
    
    float2 dir = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + agentSettings.velocity * dir * dt;

    int rand = hash(hash(agent.position.y * width + agent.position.x + hash(agentIdx + time * 100000)));

    if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height)
    {
        newPos.x = clamp(newPos.x, 0, width-1);
        newPos.y = clamp(newPos.y, 0, height-1);
        slimeAgents[agentIdx].angle = scaleToRange01(rand) * 2 * 3.14159;
    }

    int2 pxlXY = int2(newPos);

    // deposit slime
    float4 agentMask = speciesMask(agent.speciesID);
    TrailMap[pxlXY] = min(1, TrailMap[pxlXY] + agentMask * agentSettings.trailWeight * dt);

    slimeAgents[agentIdx].position = newPos;
}

float2 foodForce(int agentIdx) {
    if (numFoodSources == 0) {
        return float2(0.0, 0.0);
    }

    SlimeAgent agent = slimeAgents[agentIdx];
    int closestFoodIndex = -1;
    float minDist = 1000000000; // large value beyond any possible on-screen distance

    // determine the closest food source that is active
    for (int i = 0; i < numFoodSources; i++) {
        FoodSource food = foodSources[i];

        float2 posToFood = food.position - agent.position;
        float dist = length(posToFood);

        if (dist < minDist && food.attractorStrength > 0) {
            minDist = dist;
            closestFoodIndex = i;
        }
    }

    FoodSource closestFood = foodSources[closestFoodIndex];

    // if there is an active food source, return the force of attraction towards it
    if (closestFood.attractorStrength > 0) {
        float2 posToClosestFood = closestFood.position - agent.position;
        float dist = length(posToClosestFood);
        float2 dir = normalize(posToClosestFood);  

        // if agent is close enough to food, eat it
        if (dist < 1) {
            if (foodDepletionEnabled && closestFood.amount > 0) {
                // atomic decrement
                InterlockedAdd(foodSources[closestFoodIndex].amount, -1);
            }

            if (foodSources[closestFoodIndex].amount <= 0) {
                foodSources[closestFoodIndex].attractorStrength = 0;
            }

            slimeAgents[agentIdx].hunger = 1.0;
        }

        return dir * (closestFood.attractorStrength / (dist * dist));
    } else {
        return float2(0, 0);
    }
}

[numthreads(16,1,1)]
void UpdateSlimeSimulation (uint3 id : SV_DispatchThreadID)
{
    // TODO: update the state of slime agents based on the trail map
    if (id.x >= numAgents) 
    {
        return;
    }

    SlimeAgent agent = slimeAgents[id.x];
    SpeciesSettings agentSettings = species[agent.speciesID];

    // using same hashing method as Sebastian here
    int rand = hash(agent.position.y * width + agent.position.x + hash(id.x + time * 100000));

    float leftSample = sampleTrail(agent, agentSettings.sensorAngle);
    float midSample = sampleTrail(agent, 0);
    float rightSample = sampleTrail(agent, -agentSettings.sensorAngle);

    float turnWeight = scaleToRange01(rand);
    float turnAngle = agentSettings.rotationAngle;

    if ((midSample > leftSample) && (midSample > rightSample)) {
        // forward
        slimeAgents[id.x].angle += 0;
    } else if ((midSample < leftSample) && (midSample < rightSample)) {
        // random
        slimeAgents[id.x].angle += 2 * (turnWeight - 0.5) * turnAngle * dt;
    } else if (leftSample > rightSample) {
        // left
        slimeAgents[id.x].angle += turnWeight * turnAngle * dt;
    } else if (rightSample > leftSample) {
        // right
        slimeAgents[id.x].angle -= turnWeight * turnAngle * dt;
    } else {
        slimeAgents[id.x].angle += 0;
    }

    float2 forceOnAgent = float2(0.0, 0.0);
    
    if (numFoodSources > 0) {
        forceOnAgent = foodForce(id.x);
    }

    if (length(forceOnAgent) > 0) {
        float forceComponent = length(forceOnAgent);
        float hungerComponent = pow(1.0 - agent.hunger, 8);
        float blendValue = clamp(forceComponent * hungerComponent, 0.0, 1.0);
        slimeAgents[id.x].angle = (blendValue * atan2(forceOnAgent.y, forceOnAgent.x)) + ((1.0 - blendValue) * slimeAgents[id.x].angle);
    }
    
    step(id.x);

    slimeAgents[id.x].hunger = clamp(slimeAgents[id.x].hunger - agentSettings.hungerDecayRate * dt, 0.0, 1.0);
}

#pragma kernel Blur

[numthreads(8,8,1)]
void Blur (uint3 id : SV_DispatchThreadID)
{
    float4 prevPxl = TrailMap[id.xy];
    float4 outPxl = float4(0, 0, 0, 0);
    
    for (int i = -1; i < 2; i++) {
        for (int j = -1; j < 2; j++) {
            int x = clamp(id.x + i, 0, width-1);
            int y = clamp(id.y + j, 0, height-1);
            outPxl += TrailMap[int2(x,y)];
        }
    }

    outPxl = outPxl / 9;
    outPxl = prevPxl * (1 - diffuseRate * dt) + outPxl * diffuseRate * dt;
    NextTrailMap[id.xy] = max(0, outPxl - decayRate * dt);
}

#pragma kernel PaintSlimeSimulation

RWTexture2D<float4> ViewportTex;
RWTexture2D<float4> FoodMap;
float4 foodColor;

[numthreads(8,8,1)]
void PaintSlimeSimulation (uint3 id : SV_DispatchThreadID)
{
    ViewportTex[id.xy] = float4(0, 0, 0, 1);
    ViewportTex[id.xy] += TrailMap[id.xy].x * species[0].color;
    ViewportTex[id.xy] += TrailMap[id.xy].y * species[1].color;
    ViewportTex[id.xy] += TrailMap[id.xy].z * species[2].color;
    ViewportTex[id.xy] += TrailMap[id.xy].a * species[3].color;
    ViewportTex[id.xy] += FoodMap[id.xy] * foodColor;
}

#pragma kernel UpdateFood

int foodSourceSize;

[numthreads(8,8,1)]
void UpdateFood (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0; i < numFoodSources; i++) {
        FoodSource food = foodSources[i];
        float2 pos = food.position;
        float dist = length(pos - id.xy);
        float radius = foodSourceSize * food.amount / 1000000.0;
        
        if (dist <= radius) {
            FoodMap[id.xy] = float4(1, 1, 1, 1);
        }
    }
}

#pragma kernel Erase

int eraseBrushRadius;
float2 clickPos;

[numthreads(8,8,1)]
void Erase (uint3 id : SV_DispatchThreadID)
{
    float distance = length((int2)id.xy - clickPos);

    if (distance <= eraseBrushRadius) {
        TrailMap[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
        FoodMap[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
    }
}

#pragma kernel ClearTextures

RWTexture2D<float4> ClearTexture;

[numthreads(8,8,1)]
void ClearTextures (uint3 id : SV_DispatchThreadID)
{
    ClearTexture[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
}